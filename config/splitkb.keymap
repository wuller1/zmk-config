/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <14 15>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 52 53 54 55 61 62 63 64 65 8>;
            require-prior-idle-ms = <200>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 52 53 54 55 61 62 63 64 65 8>;
            require-prior-idle-ms = <200>;
        };

        ml: ml {
            compatible = "zmk,behavior-hold-tap";
            label = "ML";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <200>;
            hold-trigger-key-positions = <6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 52 53 54 55 61 62 63 64 65 8 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 64 60 59 57 58>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1               &kp N2             &kp N3     &kp N4          &kp N5       &kp N6       &kp N7        &kp N8     &kp N9   &kp N0                        &kp MINUS
&kp TAB    &kp Q                &kp W              &kp E      &kp R           &kp T        &kp Y        &kp U         &kp I      &kp O    &kp P                         &kp LBKT
&kp ESC    &hml LEFT_CONTROL A  &kp S              &kp D      &kp F           &kp G        &kp H        &kp J         &kp K      &kp L    &hmr RIGHT_CONTROL SEMICOLON  &hmr LEFT_WIN SQT
&kp LSHFT  &kp Z                &kp X              &kp C      &kp V           &kp B        &kp N        &kp M         &kp COMMA  &kp DOT  &kp FSLH                      &kp RSHFT
&kp LCTRL  &kp LEFT_WIN                                       &ml 1 LEFT_WIN  &ml 2 SPACE  &ml 2 SPACE  &kp LEFT_ALT                      &kp RIGHT_WIN                 &kp RCTRL
           &kp LA(G)            &kp LG(LS(RIGHT))  &kp LA(S)  &kp LA(L)       &kp LA(H)    &kp RIGHT    &kp LEFT      &kp DOWN   &kp UP   &kp ENTER
            >;
        };

        vim_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4  &none             &none              &none      &none      &none             &none
&kp TAB     &none         &kp LC(RIGHT)  &none          &kp LS(LC(Z))  &none         &kp LC(C)         &kp LC(Z)          &kp LA(S)  &kp LA(G)  &kp RIGHT         &kp LC(V)
&kp ESC     &kp LCTRL     &kp LC(LEFT)   &kp LC(RIGHT)  &kp HOME       &kp END       &kp LEFT          &kp DOWN           &kp UP     &kp RIGHT  &kp RCTRL         &none
&kp LSHFT   &none         &none          &none          &none          &kp LC(LEFT)  &kp LS(LG(LEFT))  &kp LS(LG(RIGHT))  &kp LG(H)  &kp LGUI   &kp LS(LG(LEFT))  &kp RSHFT
&none       &none                                       &none          &none         &none             &none                                    &none             &none
            &none         &none          &none          &none          &none         &none             &none              &none      &none      &none
            >;
        };

        numbers,symbols {
            bindings = <
&none           &none                 &none         &none                 &none                  &none              &none              &none             &none             &none              &none          &none
&kp GRAVE       &kp EXCLAMATION       &kp AT_SIGN   &kp HASH              &kp DOLLAR             &kp PERCENT        &none              &kp N7            &kp N8            &kp N9             &kp MINUS      &kp RIGHT_BRACKET
&none           &kp CAPSLOCK          &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET          &kp UNDER          &kp N4            &kp N5            &kp N6             &kp PLUS       &kp EQUAL
&kp LEFT_SHIFT  &none                 &none         &none                 &kp PIPE               &kp AMPERSAND      &none              &kp N1            &kp N2            &kp N3             &kp BACKSLASH  &kp RIGHT_SHIFT
&none           &none                                                     &none                  &none              &kp N0             &none                                                  &none          &none
                &kp C_BRIGHTNESS_INC  &kp K_MUTE    &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_UP        &kp C_VOLUME_DOWN  &kp RC(RG(RIGHT))  &kp LC(RG(LEFT))  &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))  &none
            >;
        };
    };
};
