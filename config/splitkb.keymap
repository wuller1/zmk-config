/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <24 23>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <24 25>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 17>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <18 17>;
        };

        Right_Bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 26>;
        };

        clear_bt {
            bindings = <&bt BT_CLR>;
            key-positions = <34 35>;
        };

        win_varm_layer {
            bindings = <&to 0>;
            key-positions = <38 39>;
        };

        mac_varm_vim_layer {
            bindings = <&to 0>;
            key-positions = <50 49>;
        };

        mac_varm_layer {
            bindings = <&to 0>;
            key-positions = <50 51>;
        };

        bluetooth_layer {
            bindings = <&mo 3>;
            key-positions = <59 60>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 42 43 44 45 46 47 54 55 56 57 58 59>;
            require-prior-idle-ms = <200>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 35 36 37 38 39 40 41 48 49 50 51 52 53 60 61 62 63 64 65>;
            require-prior-idle-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        windows_layer {
            bindings = <
&none            &none                &none  &none  &none        &none  &none           &none  &none  &none        &none         &none    &none                         &none
&kp TAB          &kp Q                &kp W  &kp E  &kp R        &kp T  &none           &none  &kp Y  &kp U        &kp I         &kp O    &kp P                         &kp LEFT_BRACKET
&kp ESCAPE       &hml LEFT_CONTROL A  &kp S  &kp D  &kp F        &kp G  &none           &none  &kp H  &kp J        &kp K         &kp L    &hmr RIGHT_CONTROL SEMICOLON  &hmr LEFT_WIN SQT
&kp RIGHT_SHIFT  &kp Z                &kp X  &kp C  &kp V        &kp B                         &kp N  &kp M        &kp COMMA     &kp DOT  &kp FSLH                      &kp RIGHT_SHIFT
&none            &none                &none  &mo 1  &lt 2 SPACE         &lt 1 LEFT_WIN  &none         &lt 2 SPACE  &kp LEFT_ALT  &none    &none                         &none
            >;
        };

        windows_vim_layer {
            bindings = <
&none            &none             &none          &none  &kp END        &none         &none  &none  &kp LC(LA(LEFT))  &kp LC(LA(RIGHT))  &kp RG(RC(LEFT))  &kp RG(RC(RIGHT))  &kp HOME           &none
&kp TAB          &none             &kp LC(RIGHT)  &none  &kp LS(LC(Z))  &none         &none  &none  &kp LC(C)         &kp LC(Z)          &kp LA(S)         &kp LA(G)          &kp LC(V)          &none
&kp ESC          &kp LEFT_CONTROL  &none          &none  &none          &none         &none  &none  &kp LEFT          &kp DOWN           &kp UP            &kp RIGHT          &kp RIGHT_CONTROL  &none
&kp RIGHT_SHIFT  &none             &none          &none  &none          &kp LC(LEFT)                &kp RG(RS(LEFT))  &kp RG(RS(RIGHT))  &kp LA(H)         &kp LA(L)          &kp LC(F)          &kp RIGHT_SHIFT
&none            &none             &none          &none  &none                        &none  &none                    &none              &none             &none              &none              &none
            >;
        };

        numbers,symbols {
            bindings = <
&none           &none            &none              &none                 &none                  &none        &none  &none  &none      &none   &none   &none   &none          &none
&kp GRAVE       &kp EXCLAMATION  &kp AT_SIGN        &kp HASH              &kp DOLLAR             &kp PERCENT  &none  &none  &none      &kp N7  &kp N8  &kp N9  &kp MINUS      &kp RIGHT_BRACKET
&kp TILDE       &kp CAPSLOCK     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp CARET    &none  &none  &kp EQUAL  &kp N4  &kp N5  &kp N6  &kp PLUS       &kp UNDER
&kp LEFT_SHIFT  &none            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp PIPE               &kp AMPS                   &none      &kp N1  &kp N2  &kp N3  &kp BACKSLASH  &none
&none           &none            &none              &none                 &none                               &none  &none             &kp N0  &none   &none   &none          &none
            >;
        };

        bluetooth_layer {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans                      &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
